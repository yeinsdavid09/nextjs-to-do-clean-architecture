// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region --------------------------------- Authentication ---------------------------------

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//#endregion

//#region --------------------------------- Users ---------------------------------

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id            String             @id @default(uuid())
  name          String?            @db.VarChar(200)
  email         String             @unique
  emailVerified DateTime?
  image         String?
  password      String?
  status        UserStatus         @default(ACTIVE)
  accounts      Account[]
  sessions      Session[]
  permissions   Permission[]
  notifications UserNotification[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  ToDo          ToDo[]
}

model UserNotification {
  id             String        @id @default(uuid())
  userId         String
  notificationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

model Permission {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles     Rol?     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

//#endregion

//#region --------------------------------- Notifications ---------------------------------

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

model Notification {
  id               String             @id @default(uuid())
  key              String             @db.VarChar(50)
  content          Json
  type             NotificationType   @default(INFO)
  userNotification UserNotification[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

//#endregion

//#region --------------------------------- Roles ---------------------------------

model Rol {
  id         String       @id @default(uuid())
  name       String       @db.VarChar(50)
  permission Permission[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

//#endregion

//#region --------------------------------- To Dos ---------------------------------

enum ToDoStatus {
  BACKLOG
  IN_PROGRESS
  DONE
  CANCELED
}

enum ToDoPriority {
  LOW
  MEDIUM
  HIGH
}

model ToDo {
  id          String       @id @default(uuid())
  title       String       @db.VarChar()
  description String?      @db.VarChar()
  status      ToDoStatus   @default(BACKLOG)
  priority    ToDoPriority @default(LOW)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//#endregion
